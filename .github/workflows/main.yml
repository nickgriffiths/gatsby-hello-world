# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Assume this is a PR build. If this is a master build, these will be overridden in the first step.
      APP_LOCAL_SANITY_DATASET: rexona-staging-gb
      APP_LOCAL_SITE_URL: https://deploy-preview-${{ github.event.number }}--rexona-web-en-gb-staging.netlify.app
      # Other APP_LOCAL_* env vars would go here
      BUILD_ID: pr-${{ github.event.number }}
      NETLIFY_DEPLOY_ALIAS: deploy-preview-${{ github.event.number }}

    steps:

      - name: Override job environment variables if running on master branch
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: |
          echo "APP_LOCAL_SITE_URL=https://rexona-web-en-gb-staging.netlify.app" >> $GITHUB_ENV
          echo "BUILD_ID=master" >> $GITHUB_ENV
          echo "NETLIFY_DEPLOY_ALIAS=" >> $GITHUB_ENV

      - name: Override job environment variables if running on release branch
        if: /refs\/heads\/(release.*$)/.test(github.ref)
        run: echo "TEST this is a release branch"
      #   env:
      #     BRANCH_NAME: ${{ github.ref.match(/refs\/heads\/(release.*$)/)[1] }}
      #   shell: bash
      #   run: |
      #     echo "APP_LOCAL_SANITY_DATASET=rexona-prod-gb" >> $GITHUB_ENV
      #     echo "APP_LOCAL_SITE_URL=https://www.suredeodorant.co.uk" >> $GITHUB_ENV
      #     echo "BUILD_ID=${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
      #     echo "NETLIFY_DEPLOY_ALIAS=" >> $GITHUB_ENV

      - name: checkout
        run: echo "checkout the code"

      - name: Build website
        run: echo "Build website here using dataset ${APP_LOCAL_SANITY_DATASET}, URL ${APP_LOCAL_SITE_URL}"
        
      - name: Deploy to staging
        run: echo "Deploy to Netlify instance here using build ID ${BUILD_ID}, alias ${NETLIFY_DEPLOY_ALIAS}"

      - name: Create test-results directory
        id: create-test-results
        run: mkdir -p test-results

      - name: Run Jest tests
        id: jest
        run: echo "Run jest tests here"
      
      - name: Lighthouse tests
        run: echo "Run Lighthouse tests here"

      - name: Run Structured Data Testing Tool
        run: echo "Run SDTT tests here using build ID ${BUILD_ID}, URL ${APP_LOCAL_SITE_URL}"

      - name: Run Cypress tests
        id: cypress
        run: echo "Run tests here using URL ${APP_LOCAL_SITE_URL}"

      - name: Merge Cypress test results
        if: ${{ success() || steps.cypress.outcome == 'failure' }}
        run: echo "Run report:cypress:merge"
      - name: Generate HTML report
        if: ${{ success() || steps.cypress.outcome == 'failure' }}
        run: echo "Run report:cypress:generate"
      - name: Upload Cypress test artifacts
        if: ${{ success() || steps.cypress.outcome == 'failure' }}
        run: echo "Run actions/upload-artifact@v1"
      - name: Copy Cypress report into test-results directory for later upload to GitHub Pages
        if: ${{ success() || steps.cypress.outcome == 'failure' }}
        run: echo "Run cp -R workspaces/web/en_GB/cypress-results/report test-results"

      - name: Run Pa11y tests
        id: pa11y
        run: echo "Run pa11y tests"

      - name: Generate Pa11y HTML report
        if: ${{ success() || steps.pa11y.outcome == 'failure' }}
        run: echo "pa11y report"

      - name: Deploy all test results to GitHub Pages
        id: github-pages
        if: ${{ success() || steps.create-test-results.outcome == 'success' }} # If we ran at least one set of tests
        run: echo "upload test results"

      - name: Comment on PR page with links to test results
        if: ${{ github.event.number && (success() || steps.github-pages.outcome == 'success') }} # We can only create links if test results were uploaded
        run: echo "comment on PR"

  create-release-branch:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Create release branch approval
        run: |
          BRANCH_NAME=release-$(date -u +%F-%H-%M)
          git branch ${BRANCH_NAME}
          git push -u origin ${BRANCH_NAME}